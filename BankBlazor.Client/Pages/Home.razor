@page "/"
@using BankBlazor.Client.DTOs
@using System.Diagnostics
@inject HttpClient HttpClient



<PageTitle>Home</PageTitle>

<section class="hero-container">
    <div class="hero-content">
        <img src="/images/hero.jpg" class="hero-img">
    </div>
</section>

<section id="greeting" class="container">
    <h2>Hello Admin! The next Scottish bank holiday is <strong>{holiday}</strong> on <strong>{date}</strong></h2>
</section>


<section id="dashboard" class="container">
    <h2>Customer Dashboard</h2>
    <div class="info">
        <p><strong>Name:</strong> John Doe</p>
        <p><strong>Email:</strong> johndoe@email.com</p>
        <p><strong>Phone:</strong> +1234567890</p>
    </div>
</section>

<section id="transactions" class="container">
    <h2>Account Transactions</h2>
    <div class="account">
        <p><strong>Account Number:</strong> 123456789</p>
        <p><strong>Balance:</strong> $5,000</p>
    </div>
    <button>Deposit</button>
    <button>Withdraw</button>
    <button>Transfer</button>
</section>


<section id="transfer" class="container">
    <h2>Transfer</h2>

    <EditForm Model="@TransferData" OnValidSubmit="TransferFunds">
        <h3 class="mt-4 text-capitalize h5">
            <span class="font-weight-bold">From </span>AccountId: @CustomerAccountId
        </h3>

        <div class="form-group">
            <label class="transaction-solid">To Account ID</label>
            <InputNumber @bind-Value="TransferData.ToAccountId" class="form-control main" min="1" />
        </div>

        <div class="form-group">
            <label class="transaction-solid">Amount</label>
            <InputNumber @bind-Value="TransferData.Amount" class="form-control main" min="1" />
        </div>

        <button type="submit" class="btn btn-primary">Transfer</button>
    </EditForm>
</section>



@code{

    //Hårdkodat, välj kontot som er kund har. För G en valfri specifik kund, för VG en kund som väljs i det paginerade sökresultatet. Måste vara dynamiskt.
    public int CustomerAccountId { get; set; } = 10002;

    public TransferDTO TransferData { get; set; } = new();


    protected async Task TransferFunds()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("Din API Adress", TransferData);

            //Skapar error om anrop ej lyckades. Fångas i Catch.
            response.EnsureSuccessStatusCode();

            if (response.IsSuccessStatusCode)
            {
                //meddela användaren att överföringen lyckades eller gör nåt annat
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Fel vid POST: {ex.Message}");
        }

    }


}
